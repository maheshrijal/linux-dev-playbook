---
- name: Check if Go is already installed
  ansible.builtin.stat:
    path: /usr/local/go
  register: go_installed
  changed_when: false
  become: false

- name: Print Go installation status
  ansible.builtin.debug:
    msg: "Go is already installed: {{ go_installed.stat.exists }}"

# - name: Skip the rest of the tasks if Go is already installed
#   ansible.builtin.meta: end_play
#   when: go_installed.stat.exists

- name: Create download directory
  ansible.builtin.file:
    path: "{{ download_dir }}/go{{ goversion }}"
    state: directory
    mode: "0755"
  when: not go_installed.stat.exists

- name: Download & Unarchive Go
  ansible.builtin.unarchive:
    src: "https://go.dev/dl/go{{ goversion }}.linux-amd64.tar.gz"
    dest: "{{ download_dir }}/go{{ goversion }}"
    creates: "{{ download_dir }}/go{{ goversion }}/go/README.md"
    remote_src: true
  when: not go_installed.stat.exists

- name: Move Go to /usr/local
  ansible.builtin.command: "mv {{ download_dir }}/go{{ goversion }}/go /usr/local/go"
  args:
    creates: "/usr/local/go/README.md"
  register: move_go
  when: not go_installed.stat.exists

- name: Set Go Binary to the PATH environment variable
  ansible.builtin.lineinfile:
    dest: /etc/profile
    regexp: '^PATH="(.*)"$'
    line: "export PATH=$PATH:/usr/local/go/bin"
  notify: Reload /etc/profile
  when: not go_installed.stat.exists

- name: Verify Go installation
  ansible.builtin.command: "go version"
  register: go_version
  changed_when: false

- name: Print Go version
  ansible.builtin.debug:
    msg: "{{ go_version.stdout }}"
